{"version":3,"file":"hocuspocus-redis.cjs","sources":["../src/Redis.ts"],"sourcesContent":["import RedisClient, { ClusterNode, ClusterOptions, RedisOptions } from 'iovalkey'\nimport Redlock from 'redlock'\nimport { v4 as uuid } from 'uuid'\nimport {\n  IncomingMessage,\n  OutgoingMessage,\n  Document,\n  Extension,\n  afterLoadDocumentPayload,\n  afterStoreDocumentPayload,\n  onDisconnectPayload,\n  onStoreDocumentPayload,\n  onAwarenessUpdatePayload,\n  onChangePayload,\n  MessageReceiver,\n  Debugger,\n  onConfigurePayload,\n  beforeBroadcastStatelessPayload, Hocuspocus,\n} from '@hocuspocus/server'\n\nexport type RedisInstance = RedisClient.Cluster | RedisClient.Redis\n\nexport interface Configuration {\n  /**\n   * Redis port\n   */\n  port: number,\n  /**\n   * Redis host\n   */\n  host: string,\n  /**\n   * Redis Cluster\n   */\n  nodes?: ClusterNode[],\n  /**\n   * Duplicate from an existed Redis instance\n   */\n  redis?: RedisInstance,\n  /**\n   * Redis instance creator\n   */\n  createClient?: () => RedisInstance,\n  /**\n   * Options passed directly to Redis constructor\n   *\n   * https://github.com/luin/iovalkey/blob/master/API.md#new-redisport-host-options\n   */\n  options?: ClusterOptions | RedisOptions,\n  /**\n   * An unique instance name, required to filter messages in Redis.\n   * If none is provided an unique id is generated.\n   */\n  identifier: string,\n  /**\n   * Namespace for Redis keys, if none is provided 'hocuspocus' is used\n   */\n  prefix: string,\n  /**\n   * The maximum time for the Redis lock in ms (in case it can’t be released).\n   */\n  lockTimeout: number,\n  /**\n   * A delay before onDisconnect is executed. This allows last minute updates'\n   * sync messages to be received by the subscription before it's closed.\n   */\n  disconnectDelay: number,\n}\n\nexport class Redis implements Extension {\n  /**\n   * Make sure to give that extension a higher priority, so\n   * the `onStoreDocument` hook is able to intercept the chain,\n   * before documents are stored to the database.\n   */\n  priority = 1000\n\n  configuration: Configuration = {\n    port: 6379,\n    host: '127.0.0.1',\n    prefix: 'hocuspocus',\n    identifier: `host-${uuid()}`,\n    lockTimeout: 1000,\n    disconnectDelay: 1000,\n  }\n\n  redisTransactionOrigin = '__hocuspocus__redis__origin__'\n\n  pub: RedisInstance\n\n  sub: RedisInstance\n\n  instance!: Hocuspocus\n\n  redlock: Redlock\n\n  locks = new Map<string, Redlock.Lock>()\n\n  logger: Debugger\n\n  messagePrefix: Buffer\n\n  /**\n   * When we have a high frequency of updates to a document we don't need tons of setTimeouts\n   * piling up, so we'll track them to keep it to the most recent per document.\n   */\n  private pendingDisconnects = new Map<string, NodeJS.Timeout>()\n\n  private pendingAfterStoreDocumentResolves = new Map<string, { timeout: NodeJS.Timeout; resolve:() => void }>()\n\n  public constructor(configuration: Partial<Configuration>) {\n    this.configuration = {\n      ...this.configuration,\n      ...configuration,\n    }\n\n    // We’ll replace that in the onConfigure hook with the global instance.\n    this.logger = new Debugger()\n\n    // Create Redis instance\n    const {\n      port,\n      host,\n      options,\n      nodes,\n      redis,\n      createClient,\n    } = this.configuration\n\n    if (typeof createClient === 'function') {\n      this.pub = createClient()\n      this.sub = createClient()\n    } else if (redis) {\n      this.pub = redis.duplicate()\n      this.sub = redis.duplicate()\n    } else if (nodes && nodes.length > 0) {\n      this.pub = new RedisClient.Cluster(nodes, options)\n      this.sub = new RedisClient.Cluster(nodes, options)\n    } else {\n      this.pub = new RedisClient(port, host, options)\n      this.sub = new RedisClient(port, host, options)\n    }\n    this.sub.on('messageBuffer', this.handleIncomingMessage)\n\n    this.redlock = new Redlock([this.pub], {\n      retryCount: 0,\n    })\n\n    const identifierBuffer = Buffer.from(this.configuration.identifier, 'utf-8')\n    this.messagePrefix = Buffer.concat([Buffer.from([identifierBuffer.length]), identifierBuffer])\n  }\n\n  async onConfigure({ instance }: onConfigurePayload) {\n    this.logger = instance.debugger\n    this.instance = instance\n  }\n\n  private getKey(documentName: string) {\n    return `${this.configuration.prefix}:${documentName}`\n  }\n\n  private pubKey(documentName: string) {\n    return this.getKey(documentName)\n  }\n\n  private subKey(documentName: string) {\n    return this.getKey(documentName)\n  }\n\n  private lockKey(documentName: string) {\n    return `${this.getKey(documentName)}:lock`\n  }\n\n  private encodeMessage(message: Uint8Array) {\n    return Buffer.concat([this.messagePrefix, Buffer.from(message)])\n  }\n\n  private decodeMessage(buffer: Buffer) {\n    const identifierLength = buffer[0]\n    const identifier = buffer.toString('utf-8', 1, identifierLength + 1)\n\n    return [identifier, buffer.slice(identifierLength + 1)]\n  }\n\n  /**\n   * Once a document is loaded, subscribe to the channel in Redis.\n   */\n  public async afterLoadDocument({ documentName, document }: afterLoadDocumentPayload) {\n    return new Promise((resolve, reject) => {\n      // On document creation the node will connect to pub and sub channels\n      // for the document.\n      this.sub.subscribe(this.subKey(documentName), async error => {\n        if (error) {\n          reject(error)\n          return\n        }\n\n        this.publishFirstSyncStep(documentName, document)\n        this.requestAwarenessFromOtherInstances(documentName)\n\n        resolve(undefined)\n      })\n    })\n  }\n\n  /**\n   * Publish the first sync step through Redis.\n   */\n  private async publishFirstSyncStep(documentName: string, document: Document) {\n    const syncMessage = new OutgoingMessage(documentName)\n      .createSyncMessage()\n      .writeFirstSyncStepFor(document)\n\n    return this.pub.publishBuffer(this.pubKey(documentName), this.encodeMessage(syncMessage.toUint8Array()))\n  }\n\n  /**\n   * Let’s ask Redis who is connected already.\n   */\n  private async requestAwarenessFromOtherInstances(documentName: string) {\n    const awarenessMessage = new OutgoingMessage(documentName)\n      .writeQueryAwareness()\n\n    return this.pub.publishBuffer(\n      this.pubKey(documentName),\n      this.encodeMessage(awarenessMessage.toUint8Array()),\n    )\n  }\n\n  /**\n   * Before the document is stored, make sure to set a lock in Redis.\n   * That’s meant to avoid conflicts with other instances trying to store the document.\n   */\n  async onStoreDocument({ documentName }: onStoreDocumentPayload) {\n    // Attempt to acquire a lock and read lastReceivedTimestamp from Redis,\n    // to avoid conflict with other instances storing the same document.\n\n    return new Promise((resolve, reject) => {\n      this.redlock.lock(this.lockKey(documentName), this.configuration.lockTimeout, async (error, lock) => {\n        if (error || !lock) {\n          // Expected behavior: Could not acquire lock, another instance locked it already.\n          // No further `onStoreDocument` hooks will be executed.\n          console.log('unable to acquire lock')\n          reject()\n          return\n        }\n\n        this.locks.set(this.lockKey(documentName), lock)\n\n        resolve(undefined)\n      })\n    })\n  }\n\n  /**\n   * Release the Redis lock, so other instances can store documents.\n   */\n  async afterStoreDocument({ documentName, socketId }: afterStoreDocumentPayload) {\n    this.locks.get(this.lockKey(documentName))?.unlock()\n      .catch(() => {\n        // Not able to unlock Redis. The lock will expire after ${lockTimeout} ms.\n        // console.error(`Not able to unlock Redis. The lock will expire after ${this.configuration.lockTimeout}ms.`)\n      })\n      .finally(() => {\n        this.locks.delete(this.lockKey(documentName))\n      })\n\n    // if the change was initiated by a directConnection, we need to delay this hook to make sure sync can finish first.\n    // for provider connections, this usually happens in the onDisconnect hook\n    if (socketId === 'server') {\n      const pending = this.pendingAfterStoreDocumentResolves.get(documentName)\n\n      if (pending) {\n        clearTimeout(pending.timeout)\n        pending.resolve()\n        this.pendingAfterStoreDocumentResolves.delete(documentName)\n      }\n\n      let resolveFunction: () => void = () => {}\n      const delayedPromise = new Promise<void>(resolve => {\n        resolveFunction = resolve\n      })\n\n      const timeout = setTimeout(() => {\n        this.pendingAfterStoreDocumentResolves.delete(documentName)\n        resolveFunction()\n      }, this.configuration.disconnectDelay)\n\n      this.pendingAfterStoreDocumentResolves.set(documentName, { timeout, resolve: resolveFunction })\n\n      await delayedPromise\n    }\n  }\n\n  /**\n   * Handle awareness update messages received directly by this Hocuspocus instance.\n   */\n  async onAwarenessUpdate({\n    documentName, awareness, added, updated, removed,\n  }: onAwarenessUpdatePayload) {\n    const changedClients = added.concat(updated, removed)\n    const message = new OutgoingMessage(documentName)\n      .createAwarenessUpdateMessage(awareness, changedClients)\n\n    return this.pub.publishBuffer(\n      this.pubKey(documentName),\n      this.encodeMessage(message.toUint8Array()),\n    )\n  }\n\n  /**\n   * Handle incoming messages published on subscribed document channels.\n   * Note that this will also include messages from ourselves as it is not possible\n   * in Redis to filter these.\n  */\n  private handleIncomingMessage = async (channel: Buffer, data: Buffer) => {\n    const [identifier, messageBuffer] = this.decodeMessage(data)\n\n    if (identifier === this.configuration.identifier) {\n      return\n    }\n\n    const message = new IncomingMessage(messageBuffer)\n    const documentName = message.readVarString()\n    message.writeVarString(documentName)\n\n    const document = this.instance.documents.get(documentName)\n\n    if (!document) {\n      // What does this mean? Why are we subscribed to this document?\n      this.logger.log(`Received message for unknown document ${documentName}`)\n      return\n    }\n\n    new MessageReceiver(\n      message,\n      this.logger,\n      this.redisTransactionOrigin,\n    ).apply(document, undefined, reply => {\n      return this.pub.publishBuffer(\n        this.pubKey(document.name),\n        this.encodeMessage(reply),\n      )\n    })\n  }\n\n  /**\n   * if the ydoc changed, we'll need to inform other Hocuspocus servers about it.\n   */\n  public async onChange(data: onChangePayload): Promise<any> {\n    if (data.transactionOrigin !== this.redisTransactionOrigin) {\n      return this.publishFirstSyncStep(data.documentName, data.document)\n    }\n  }\n\n  /**\n   * Make sure to *not* listen for further changes, when there’s\n   * no one connected anymore.\n   */\n  public onDisconnect = async ({ documentName }: onDisconnectPayload) => {\n    const pending = this.pendingDisconnects.get(documentName)\n\n    if (pending) {\n      clearTimeout(pending)\n      this.pendingDisconnects.delete(documentName)\n    }\n\n    const disconnect = () => {\n      const document = this.instance.documents.get(documentName)\n\n      this.pendingDisconnects.delete(documentName)\n\n      // Do nothing, when other users are still connected to the document.\n      if (!document || document.getConnectionsCount() > 0) {\n        return\n      }\n\n      // Time to end the subscription on the document channel.\n      this.sub.unsubscribe(this.subKey(documentName), (error: any) => {\n        if (error) {\n          console.error(error)\n        }\n      })\n\n      this.instance.unloadDocument(document)\n    }\n    // Delay the disconnect procedure to allow last minute syncs to happen\n    const timeout = setTimeout(disconnect, this.configuration.disconnectDelay)\n    this.pendingDisconnects.set(documentName, timeout)\n  }\n\n  async beforeBroadcastStateless(data: beforeBroadcastStatelessPayload) {\n    const message = new OutgoingMessage(data.documentName)\n      .writeBroadcastStateless(data.payload)\n\n    return this.pub.publishBuffer(\n      this.pubKey(data.documentName),\n      this.encodeMessage(message.toUint8Array()),\n    )\n  }\n\n  /**\n   * Kill the Redlock connection immediately.\n   */\n  async onDestroy() {\n    await this.redlock.quit()\n    this.pub.disconnect(false)\n    this.sub.disconnect(false)\n  }\n}\n"],"names":["uuid","IncomingMessage","MessageReceiver","Debugger","RedisClient","Redlock","OutgoingMessage"],"mappings":"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"}